import { Vector } from "./vector.js";

const Corners = [
  {
    "name": "tl-i",
    "path": [
      "M",
      [
        15.54,
        5.62
      ],
      "c",
      "-3.23,0-7.49-.38-8.71,2.56-1.22,2.94-.11,10.85-.11,15.61"
    ],
    "end": [
      -8.820000209808349,
      18.170000915527343
    ]
  },
  {
    "name": "bl-i",
    "path": [
      "M",
      [
        5.92,
        4.82
      ],
      "c",
      "0,5.66.46,9.25,2.21,12.95.96,2.03,2.92,3.09,5.03,3.57,1.82.42,3.32.51,6.8.51"
    ],
    "end": [
      14.039999084472656,
      17.030000381469726
    ]
  },
  {
    "name": "br-i",
    "path": [
      "M",
      [
        9.35,
        20.24
      ],
      "c",
      "3.01,0,2.79-.08,3.52-.13,1.23-.08,4.83-.51,5.85-.92",
      "s",
      "2.35-1.71,2.62-2.73",
      "c",
      ".2-.46.51-1.71.51-3.91"
    ],
    "end": [
      12.500000381469727,
      -7.689998855590819
    ]
  },
  {
    "name": "tr-i",
    "path": [
      "M",
      [
        22.56,
        12.31
      ],
      "c",
      "0-2-.27-2.85-.59-3.8-.49-1.44-1.62-3-3.28-3.22-.72-.1-.71-.17-2.26-.17"
    ],
    "end": [
      -6.13000160217285,
      -7.1900001144409185
    ]
  },
  {
    "name": "r",
    "path": [
      "M",
      [
        8.28,
        6.26
      ],
      "c",
      "-2.19,0-4.8-.56-5.16-1.04-.26-.35-.3-.74-.29-1.15.03-.45,1.14-1.06,1.43-1.14.84-.23,2.39.26,3.86.26"
    ],
    "end": [
      -0.15999916076660092,
      -3.0699997043609617
    ]
  },
  {
    "name": "tr-o",
    "path": [
      "M",
      [
        16.43,
        3.65
      ],
      "c",
      "3.07,0,4.16-2.38,6.62.97.88.95,2.46,3.81,2.46,7.69"
    ],
    "end": [
      9.079998321533203,
      8.659999465942382
    ]
  },
  {
    "name": "br-o",
    "path": [
      "M",
      [
        24.86,
        12.55
      ],
      "c",
      "0,1.63-.1,2.36,0,3.52.2,2.52,1.4,3.09-.05,5.57-.44.76-1.04,1.54-1.32,1.97-.49.75-1.99,2.13-3.56,2.14-.97,0-3.57-2.06-5.35-2.27-1.45-.17-2.22.28-5.28.28"
    ],
    "end": [
      -15.55999885559082,
      11.209998321533202
    ]
  },
  {
    "name": "bl-o",
    "path": [
      "M",
      [
        20.26,
        25.51
      ],
      "c",
      "-3.36,0-4.02-.19-5.87-.47-1.14-.18-6.1-1.52-7.05-1.96-.72-.33-1.43-1.13-1.87-1.79-1.94-2.93-2.63-9.01-2.63-16.47"
    ],
    "end": [
      -17.41999984741211,
      -20.68999839782715
    ]
  },
  {
    "name": "tl-o",
    "path": [
      "M",
      [
        3.3,
        23.79
      ],
      "c",
      "0-5.46-.78-9.68-.31-14.37.23-2.3,3.42-6.52,5.82-6.58,1.19-.03,4.22.27,6.73.27"
    ],
    "end": [
      12.240000915527343,
      -20.67999891281128
    ]
  },
  {
    "name": "l",
    "path": [
      "M",
      [
        20.05,
        3.39
      ],
      "c",
      "1.63,0,3.95-1.33,4.92.13",
      "s",
      ".67,3.48-1.55,3.48",
      "c",
      "-.72,0-2.02-.79-3.19-.79"
    ],
    "end": [
      0.17999954223632741,
      2.8200000381469725
    ]
  }
]
const JoinCodes = [
    {
        startA: ["tl-i", "end"],
        endA:  ["bl-i", "start"],
        startB: ["tl-o", "start"],
        endB:   [ "bl-o", "end"],
    },
    {
        startA: ["bl-i", "end"],
        endA:  ["br-i", "start"],
        startB: ["bl-o", "start"],
        endB:   [ "br-o", "end"],
    },
    {
        startA: ["br-i", "end"],
        endA:  ["tr-i", "start"],
        startB: ["br-o", "start"],
        endB:   [ "tr-o", "end"],
    },
    {
        startA: ["tr-i", "end"],
        endA:  ["r", "start"],
        startB: ["tr-o", "start"],
        endB:   [ "r", "end"],
        segs: 3
    },

    {
        startA: ["tl-o", "end"],
        endA:  ["l", "start"],
        startB: ["tl-i", "start"],
        endB:   [ "l", "end"],
        segs: 3
    },
  
    
]
const s = 28.35;
function getPathSegments(w, h, m, mar = s) {
    let segments = [];
    let pad = (w - m) / 2;
    const startPoints = {
        "tl": [mar,mar],
        "tr": [w-s-mar,mar],
        "bl": [mar,h-s-mar],
        "br": [w-s-mar,h-s-mar],
        "r": [pad + m, mar],
        "l": [pad - s, mar],
    }
    let d = "";
    for (let i = 0; i < Corners.length; i++) {
        let corner = Corners[i];
        let name = corner.name.split("-")[0];
        let cornerStart = new Vector(startPoints[name]);
        let relPathStart = new Vector(corner.path[1]);
        let pathStart = cornerStart.add(relPathStart);
        let relPathEnd = new Vector(corner.end);
        let pathEnd = pathStart.add(relPathEnd);
        segments.push({
            start: pathStart,
            end: pathEnd,
            path: pathStart + corner.path.slice(2).join(" "),
            name: corner.name,
            area: name,
            index: i,
        })

        if (segments.length > 2) {
            segments[i-1].next = segments[i];
            segments[i].prev = segments[i-1];
        }
    }

    return segments;
}

function makePerturbedLineBetween(startA, endA, startB, endB, segments=5, variance=2, thickVariance=0.2) {
    let start = startA.add(startB).div(2);
    let end = endA.add(endB).div(2);

    let midsA = [];
    let midsB = [];
    for (let i = 0; i < segments; i++) {
        let t = (i + Math.random()*0.5) / segments;
        t = 0.1 + t * 0.8;
        let pA = startA.mul(1 - t).add(endA.mul(t));
        let pB = startB.mul(1 - t).add(endB.mul(t));
        let perturbA = startA.sub(startB).mul((0.5 - Math.random()) * variance);
        let perturbB = perturbA.mul(1 + perturbA.norm() * thickVariance * (Math.random() - 0.5));
        let pAp = pA.add(perturbA);
        let pBp = pB.add(perturbB);
        pAp.unp = pA;
        pBp.unp = pB;
        midsA.push(pAp);
        midsB.push(pBp);
    }

    let frac = 0.5;
    startA.unp = start;
    endA.unp = end;
    startB.unp = start;
    endB.unp = end;
    let allPA = [startA, ...midsA, endA];
    let allPB = [startB, ...midsB, endB];
    let dir = end.sub(start).dir();
    for (let allP of [allPA, allPB]) {
        for (let i = 0; i < allP.length; i++) {
            let p = allP[i];
            if (i < allP.length - 1) {
                let next = allP[i+1];
                let dist = p.unp.dist(next.unp);
                let tang = p.add(dir.mul(frac * dist));
                p.nextTang = tang;
            }

            if (i > 0) {
                let prev = allP[i-1];
                let dist = p.unp.dist(prev.unp);
                let tang = p.sub(dir.mul(frac * dist));
                p.prevTang = tang;
            }
        }
    }
    let dB = "C" + endB.prevTang + midsB.reverse().map(p => `,${p.nextTang},${p},C${p.prevTang}`).join("") + "," + startB.nextTang + ",";
    let dA = "C" + startA.nextTang + midsA.map(p => `,${p.prevTang},${p}C${p.nextTang}`).join("") + "," + endA.prevTang + ",";
    // let dA = `L${midsA.join("L")}L`;
    return [dA, dB];
}

export function getBorderPath(w, h, m, mar = s) {
    let segments = getPathSegments(w, h, m, mar);
    let sn = {};
    for (let segment of segments) {
        sn[segment.name] = segment;
    }

    for (let jc of JoinCodes) {
        let sa = sn[jc.startA[0]][jc.startA[1]];
        let ea = sn[jc.endA[0]][jc.endA[1]];
        let sb = sn[jc.startB[0]][jc.startB[1]];
        let eb = sn[jc.endB[0]][jc.endB[1]];
        let [dA, dB] = makePerturbedLineBetween(sa, ea, sb, eb, jc.segs || 5);
        sn[jc.startA[0]].join = dA;
        sn[jc.endB[0]].join = dB;
    }

    let d = "M" + segments.map((s, i) => {
        if (s.join) {
            return s.path + s.join;
        } else {
            if (i < segments.length - 1) {
                return s.path + "L";
            } else {
                return s.path;
            }
        }
    }).join("");
  
    d += segments[0].start + "Z";
    return d;

}

const maevesText = `
<path d="M186.86,8.78c2.34-.6,5.2.22,7.41,0,1.57-.16,2.84-1.46,4.28,0s-.03,3.24-1.77,3.61c-.67.14-1.37,0-2.06.19-1.76.49-3.51,1.69-5.33,1.86-.53.53,3.28,11.13,3.74,12.73s.7,3.4,1.13,5.07c.4,1.56,1.66,3.88,1.17,5.28-.63,1.81-1.84,1.37-3.16.51-.28-2.26-1.62-4.32-2.46-6.42-.48-1.2-.76-2.66-1.22-3.85-.49-1.26-1.48-2.4-1.46-3.75-.4-.07-.41.5-.48.78-1.05,4.32-1.36,8.77-2.4,13.1-3.18,2.83-3.93-.51-4.16-3.32-.38-4.72-.08-9.96-.57-14.64-.06-.55-.37-1.74-.63-2.19-.13-.23-3.65-3.33-3.89-3.44-1.27-.58-2.65.51-3.94-1.13-.52-.66-.79-1.3-.19-2.03.37-.45,2.93-1.73,3.46-1.78.88-.08,2.87,1.75,4.5.59.4-.29,2.86-5.3,3.34-6.24.4-.79.51-2.59,2.01-2.81,2.87-.42,1.91,6.11,2.67,7.88h0ZM183.18,27.95l1.19-9.65,2.13-1.74-.92-3.25-2.34-1.61.09-3.18c-1.07,1.78-.26,3.63-1.85,5.22.94,1.02,1.16,1.24,1.24,2.72.13,2.47-.49,5.62-.09,8.26l.56,3.24h0Z"/>
<path d="M22.6,16.44c-.52,3.31.41,6.29.77,9.43.18,1.54.16,3.19.35,4.73.11.95.84,2.08.4,2.98-3.73,2.98-4.14-2.35-5.16-4.7-.53-1.21-1.57-3.36-2.33-4.37-.13-.17-.72-.9-.97-.78l-5.55,11.64c-1.15,2.38-.44,5.13-4.12,3.79-.32-.52-.4-1.14-.33-1.74.35-3.29,2.18-7.85,2.79-11.32.37-2.09.4-4.54.81-6.67-.23-.97-2.44-3.16-3.35-3.72-1.31-.83-5.74-1.87-5.91-3.13.49-3.54,4.06-1.49,6.35-1.26,1.01.1,2.08-.07,3.09,0,2.02.16,3,1.55,4.34-1.02.76-1.48,1.86-4.33,2.48-5.97.51-1.34.24-3.4,1.85-4.06,1.22-.5,2.29-.38,2.48,1.04.22,1.62-.53,9.24-.17,9.75.38.37.95.3,1.43.28,1.42-.05,3.33-.2,4.76-.33,1.33-.12,2.25-1.09,3.57-.13,4.23,3.08-6.11,4.68-7.59,5.55h.01ZM19.74,23.44c-.22-1.55-.63-7.59-1.53-8.46-.41-.4-1.35-.65-1.84-1.11-.78,2.14-3.43.93-5.08,1.41-.38.42,1.37,1.58,1.55,1.98.46.99-.3,1.86-.52,2.86-.39,1.85-.8,3.71-1.03,5.59l2.53-5.7c3.35-3.24,3.74,1.83,5.92,3.45v-.02Z"/>
<path d="M53.78,5.19c.67.39,1.41,3.69,1.48,4.57.35,4.66-.78,9.27-1.4,13.84-.77.84-3.24.92-3.42-.31-.21-1.41,1.27-5.97,1.42-7.89s-.1-3.88,0-5.77c-.81-.16-.45.24-.63.62-1.03,2.12-1.71,3.7-2.03,6.1-.21,1.64.65,5.12-2.01,5.4-3.14.32-1.63-2.97-1.53-4.65s-.11-5.13-.78-6.54c-.35-.73-1.1.21-1.46.71-2.63,3.55-2.81,8.8-3.54,13.02-.66,1.6-3.69,1.51-3.78-.12-.06-1.05,1.09-4.4,1.3-5.73s.55-3.07.64-4.43c.08-1.22-.25-5.69.14-6.34.74-1.22,3.47-1.08,3.95.56,2.44-2.69,4.45-2.56,5.92.85,1.06-1.35,3.69-5.05,5.72-3.88h0Z"/>
<path d="M163.74,11.89c1.4.17,3.85-.7,3.97,1.27.14,2.34-3.24,1.55-3.42,2.3l1.13,10.94c.25,1.33-.26,3.67-1.85,3.81-2.1.18-1.17-3.4-1.25-4.65-.14-2.13-.58-5.11-.87-7.3-.05-.39-.26-1.73-.66-1.81-.65.25-2.4.55-2.64,1.26-.59,1.74.7,6.85.8,8.97.05.99.26,2.59-.85,3.09-2.55,1.14-2.07-3.36-2.25-4.78-.44-3.52-.98-7.04-1.15-10.46-.04-.8-.16-2.29-.28-3.04-.24-1.44-1.2-2.62-.63-4.05,5.25-3.54,3.04,4.3,4.18,6.14.28.45,2.69-.07,2.7-1.26,0-.27-.54-2.82-.64-3.06-.23-.55-.93-.43-1.07-1.18-.39-1.99.17-5.4,2.9-4.6,1.44.42.9,2.11,1.08,3.15.3,1.74.84,3.45.81,5.25h0Z"/>
<path d="M113.86,25.27c0,.1.26.33.27.59.03,2.57-3.14,2.94-3.58.47-.94-5.28.72-10.41-.09-15.68-.2-1.3-1.76-3.71-.14-4.69,1.87-1.12,3.1.81,3.4.81.35,0,2.42-2.02,3.03-2.27,3.29-1.32,3.65,2.93,3.29,5.26-.34,2.21-2.45,3.61-2.8,5.62.93,2.95,5.01,10.25,3.79,13.13-.3.72-1.72,1.28-2.25.57-.32-.42-.82-3.88-1.12-4.79-.58-1.75-2.13-4.87-3.09-6.48-.18-.31-.28-.78-.71-.84.02,2.77-.02,5.54,0,8.31h0ZM117.04,7.92c-.65.64-.85,1.07-1.07,1.43-.24.41-1.48,2.91-1.27,3.1,1.9.05,2.25-3.11,2.34-4.54h0Z"/>
<path d="M98.29,8.16c-.55.57-2.82,1.16-3.25,2.52-.1.33-.38,2.28-.06,2.48,1.01.01,3.56-.73,3.68.85.15,1.96-2.96,2.03-3.34,2.85-.19,1.07-.61,6.74-.05,7.13.81-.3,1.84-.56,2.6-.92,1.58-.74,5.46-4.2,6.09-1.23-1.44,1.84-3.66,3.05-5.68,4.17-.42.23-.99.24-1.47.5-1.47.79-2.15,2.43-4.45,1.66-1.37-.46-.45-4.94-.46-6.3,0-.98-.15-3.96-.3-4.76-.12-.65-.81-1.07-.84-1.73-.04-.77.66-1.06.73-1.65.15-1.4-1.11-4.16-.68-5.33,1.72-1.28,4.65-2.86,6.86-2.42,1.04.2,1.34,1.45.64,2.17h-.02Z"/>
<path d="M73.28,21.75c.42.1.36,0,.56-.17.34-.3,3.79-2.22,4.15-2.34.16-.05,2.04-.3,2.14-.27.79.21,1,1.81.34,2.52s-4.4,2.01-5.72,3.01c-.7.53-1.32,1.7-1.76,1.9-1.01.45-2.95.31-3.26-.97.19-2.38.25-4.81.17-7.21-.04-1.22-.29-7.36-.61-7.86-.35-.55-1.32-.4-.77-1.94.64-1.81,7.09-2.05,8.79-1.84l.34.22c1.08,2.74-3.44,2.17-4.24,3.13-.54.64-.71,4.15,0,4.21.93-.57,4.5-1.58,4.52.14.03,2.64-3.17,2.22-4.66,3.39v4.08h.02Z"/>
<path d="M84.56,13.02c.46-.02.35-.36.41-.58.35-1.22,1.67-8.07,2.16-8.41.12-.08.53.22.81.1.5-.21.93-1.2,1.99-.57l.28.59c-.53,3.49-2.03,6.96-2.52,10.45-.38,2.72.14,6.93-.38,9.2-.34,1.49-1.97,2.03-3.32,1.46s-.69-2.31-.87-3.35c-.65-3.8-1.81-8.54-2.99-12.22-.4-1.25-1.78-2.37-.65-3.58.86-.93,2.26-.96,3.11,0,.77.87,1.65,5.51,1.97,6.91Z"/>
<path d="M147.73,19.98c2.54-3.07,6.06-6.57,5.29-11.03-.17-1.01-1.28-2.87-2.41-2.97-2.13-.2-3.06,2.54-3.92,2.46-1.28-1.61-4.07-1.26-4.06,1.02,0,2.24,1.96,6.37,1.33,8.43-.04.14-1.58,2.04-1.76,2.18-.42.31-1.02.33-1.38.59-1.02.76-1.91,1.74-3.14,2.22-.59.09-.34-.1-.45-.4-.27-.71-.43-2.29-.53-3.13-.39-3.21-.28-6.41-.34-9.57-.07-3.49-4.74-3.22-4.46.28.08,1.02.63,2.27.79,3.46.57,4.29.75,8.21,1.6,12.43.06.29-.13.58-.13.86l1.85.57c1.47.11,7.61-5.46,8.14-5.35.29.2.37.37.43.71.46,2.55.39,5.45,1,8.02.71,1.27,2.57,1.05,3.36-.02.73-.99-.26-4.32-.67-5.49l-.53-5.27h0ZM148.36,12.72c.38-1.84,1.4-2.73,1.4-2.73,0,0,.24.97,0,2.47-.19,1.2-1.62,2.42-1.62,2.42,0,0-.16-.32.22-2.16Z"/>
<path d="M133.55,25.85c-.31-2.97-2.26-6.39-1.94-9.27,0-.1,1.05-.65.8-1.71-.11-.46-1.73-1.12-1.86-1.35-.1-.17-.27-2.27-.5-3.03-.34-1.17-1.92-4.89-3.1-5.09-.88-.15-3.83.85-4.16,1.77-.36.98.32,1.77.39,2.87.1,1.83.23,5.36,0,7.07-.07.54-.56.28-.61.81-.1.88.3,1.69.32,2.54.03,1.37-.28,6.98.24,7.64,5.04,2.22,2.43-5.9,3.18-8.42.25-.83,1.69-1.21,2.46-1.02.41,2.67,1.49,5.46,1.92,8.08.19,1.17-.46,3.84,1.3,3.67,2.08-.2,1.7-3.17,1.55-4.57h0ZM127.37,15.25c-1.03.42-.48-3.78-.48-3.78,0,0,1.51,3.36.48,3.78Z"/>
<path d="M66.67,17.54c.43-1.11,3.14-2.11-.68-2.58-.29-1.41-1.38-7.77-2.98-7.84-.63-.03-2.92.86-3.41,1.38-1.24,1.33-.36,1.78-.44,2.94-.07,1-.46,4.93-.82,5.6-.23.44-2.23.99-2.29,1.76-.13,1.62,1.52,1.54,1.66,2.29.11.55-.93,4.23-.75,5.27.38,1.26,3.4,1.19,3.86.43.13-.22.24-3.32.36-4.01.11-.6.86-4.44,1.93-3.55.27.22.76,5.97.87,6.87.07.53.37.97.44,1.48.1.75-.47,2.37.38,2.77.95.45,3,.03,3.1-1.13-.31-2.42-.58-4.84-.92-7.25-.2-1.41-.97-2.78-.34-4.42h.03ZM62.69,15.94c-1.14.29,0-2.72,0-2.72,0,0,1.14,2.43,0,2.72Z"/>
`
const logoWidth = 200;
const logoHeight = 40;
class MaevesBorder extends HTMLElement {
    constructor() {
        super();
    }
    connectedCallback() {
        if (!this.svg) {
            let svg = document.createElementNS("http://www.w3.org/2000/svg", "svg");
            let path = document.createElementNS("http://www.w3.org/2000/svg", "path");
            let logo = document.createElementNS("http://www.w3.org/2000/svg", "svg");
            let a = document.createElement("a");
            a.setAttribute("href", "/#");
            logo.setAttribute("viewBox", `0 0 ${logoWidth} ${logoHeight}`);
            logo.innerHTML = maevesText;
            svg.appendChild(path);
            this.appendChild(svg);
            this.appendChild(a);
            a.appendChild(logo);
            logo.classList.add("maeves-logo");
            svg.classList.add("border");
            this.path = path;
            this.logo = logo;
            this.svg = svg;
        };
        this.resizeObserver = new ResizeObserver(() => this.draw());
        this.resizeObserver.observe(this);
        this.draw();
    }

    disconnectCallback() {
        this.resizeObserver.unobserve(this);
        this.resizeObserver = null;
    }

    draw() {
        const {svg, path, logo} = this;
        let mar = 5;
        let minWidth = 320;
        let w = svg.clientWidth/2;
        let h = svg.clientHeight/2;

        if (w < minWidth) {
            w = minWidth;
            h = minWidth * (svg.clientHeight/svg.clientWidth);
        }

        let px = svg.clientWidth / w
        this.style.setProperty("--border-width", `${px * (logoHeight + mar * 2)}px`);

        let d = getBorderPath(w, h, logoWidth + 2 * mar, mar + 7);
        path.setAttribute("d", d);
        svg.setAttribute("viewBox", `0 0 ${w} ${h}`);
        logo.style.left = `${(svg.clientWidth - px * logoWidth) / 2}px`;
        logo.style.top = `${mar * px}px`;
        logo.style.width = `${px * logoWidth}px`;
    }

}
    

customElements.define("maeves-border", MaevesBorder);